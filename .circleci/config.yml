version: 2.1

# Define reusable orbs for common tasks
orbs:
  node: circleci/node@5.1.0
  docker: circleci/docker@2.6.0

# Define jobs
jobs:
  # Lint and test job
  test:
    docker:
      - image: cimg/node:18.20
    working_directory: ~/repo
    steps:
      - checkout
      
      # Restore cache
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-{{ checksum "secureblog-backend/package-lock.json" }}
            - v1-deps-{{ checksum "secureblog-frontend/package-lock.json" }}
            - v1-deps-
      
      # Install root dependencies
      - run:
          name: Install Root Dependencies
          command: npm install
      
      # Install backend dependencies
      - run:
          name: Install Backend Dependencies
          command: |
            cd secureblog-backend
            npm install
      
      # Install frontend dependencies
      - run:
          name: Install Frontend Dependencies
          command: |
            cd secureblog-frontend
            npm install
      
      # Save cache
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}-{{ checksum "secureblog-backend/package-lock.json" }}-{{ checksum "secureblog-frontend/package-lock.json" }}
          paths:
            - node_modules
            - secureblog-backend/node_modules
            - secureblog-frontend/node_modules
      
      # Run ESLint on backend
      - run:
          name: Run ESLint (Backend)
          command: |
            cd secureblog-backend
            npm run lint
      
      # Run ESLint on frontend
      - run:
          name: Run ESLint (Frontend)
          command: |
            cd secureblog-frontend
            npm run lint
      
      # Run Jest tests
      - run:
          name: Run Jest Tests
          command: |
            cd secureblog-backend
            npm test
      
      # Store test results
      - store_test_results:
          path: secureblog-backend/test-results
      
      # Store artifacts (test coverage reports)
      - store_artifacts:
          path: secureblog-backend/coverage
          destination: coverage

  # Build Docker image job
  build-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      
      # Setup Docker
      - setup_remote_docker:
          docker_layer_caching: true
      
      # Build Docker image
      - run:
          name: Build Docker Image
          command: |
            docker build -t secureblog-backend:$CIRCLE_SHA1 .
            docker tag secureblog-backend:$CIRCLE_SHA1 secureblog-backend:latest
      
      # Save Docker image
      - run:
          name: Save Docker Image
          command: |
            docker save secureblog-backend:$CIRCLE_SHA1 | gzip > secureblog-backend-$CIRCLE_SHA1.tar.gz
      
      # Store Docker image as artifact
      - store_artifacts:
          path: secureblog-backend-$CIRCLE_SHA1.tar.gz
          destination: docker-image

  # Deploy to Render job
  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      
      # Trigger Render deployment
      - run:
          name: Deploy to Render
          command: |
            curl -X POST "$RENDER_DEPLOY_HOOK_URL"
      
      # Wait for deployment to complete
      - run:
          name: Wait for Deployment
          command: |
            echo "Waiting 30 seconds for deployment to complete..."
            sleep 30
      
      # Health check
      - run:
          name: Health Check
          command: |
            echo "Performing health check..."
            for i in {1..5}; do
              if curl -f -k "$RENDER_SERVICE_URL/health"; then
                echo "Health check passed!"
                exit 0
              else
                echo "Health check attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            done
            echo "Health check failed after 5 attempts"
            exit 1

# Define workflows
workflows:
  test-build-deploy:
    jobs:
      # Run tests first
      - test
      
      # Build Docker image (runs in parallel with test)
      - build-docker:
          requires:
            - test
      
      # Deploy to Render (runs after both test and build complete)
      - deploy:
          requires:
            - test
            - build-docker
          filters:
            branches:
              only: master  # Only deploy from master branch
